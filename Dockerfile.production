# ==========================================
# Stage 1: Builder - Build Medusa application
# ==========================================
FROM node:20-alpine AS builder

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++ git

WORKDIR /app

# Copy package files for dependency installation
COPY package.json package-lock.json* ./

# Install all dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Create directories that might not exist
RUN mkdir -p dist uploads

# Build Medusa application
# This creates the .medusa/server directory with compiled code
RUN npm run build

# Install production dependencies in the build output
WORKDIR /app/.medusa/server
RUN npm ci --omit=dev --ignore-scripts

# ==========================================
# Stage 2: Runtime - Production image
# ==========================================
FROM node:20-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    dumb-init

# Environment variables
ENV NODE_ENV=production \
    PORT=9000 \
    LOG_LEVEL=info

# Create non-root user
RUN addgroup -S medusa && \
    adduser -S medusa -G medusa

WORKDIR /app

# Copy application files from builder
COPY --chown=medusa:medusa --from=builder /app/package.json ./
COPY --chown=medusa:medusa --from=builder /app/node_modules ./node_modules
COPY --chown=medusa:medusa --from=builder /app/medusa-config.* ./
COPY --chown=medusa:medusa --from=builder /app/.medusa/server ./.medusa/server
COPY --chown=medusa:medusa --from=builder /app/dist ./dist
COPY --chown=medusa:medusa --from=builder /app/uploads ./uploads

# Create uploads directory with proper permissions
RUN mkdir -p /app/uploads && \
    chown -R medusa:medusa /app/uploads

# Switch to root temporarily to create entrypoint
USER root

# Create entrypoint script inline
RUN cat > /app/docker-entrypoint.sh <<'ENTRYPOINT'
#!/bin/sh
set -e

echo "================================================"
echo "Starting Medusa Backend Service"
echo "================================================"

# Environment Variables Validation
if [ -z "$DATABASE_URL" ]; then
    echo "ERROR: DATABASE_URL is not set." >&2
    exit 1
fi

if [ -z "$REDIS_URL" ]; then
    echo "ERROR: REDIS_URL is not set." >&2
    exit 1
fi

# Set defaults for optional variables
MEDUSA_WORKER_MODE=${MEDUSA_WORKER_MODE:-server}
DISABLE_MEDUSA_ADMIN=${DISABLE_MEDUSA_ADMIN:-false}

echo "Configuration:"
echo "  - NODE_ENV: ${NODE_ENV}"
echo "  - Worker Mode: ${MEDUSA_WORKER_MODE}"
echo "  - Admin Disabled: ${DISABLE_MEDUSA_ADMIN}"
echo "  - Port: ${PORT}"

# Wait for dependencies
echo ""
echo "Waiting for database to be ready..."
until nc -z postgres 5432 2>/dev/null; do
    echo "  Waiting for PostgreSQL..."
    sleep 2
done
echo "✓ PostgreSQL is ready"

echo "Waiting for Redis to be ready..."
until nc -z redis 6379 2>/dev/null; do
    echo "  Waiting for Redis..."
    sleep 2
done
echo "✓ Redis is ready"

# Database Migrations & Links Sync
echo ""
echo "Running database migrations..."
npx medusa db:migrate

echo "Syncing database links..."
npx medusa links:sync

# Start Medusa Application
echo ""
echo "================================================"
echo "Starting Medusa in ${MEDUSA_WORKER_MODE} mode..."
echo "================================================"

cd /app/.medusa/server

# Start the application
exec npm run start
ENTRYPOINT

# Set proper permissions
RUN chmod +x /app/docker-entrypoint.sh && \
    chown medusa:medusa /app/docker-entrypoint.sh

# Switch to non-root user
USER medusa

# Expose Medusa port
EXPOSE 9000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Use dumb-init for proper signal handling, then execute script with sh
ENTRYPOINT ["/usr/bin/dumb-init", "--", "/bin/sh", "/app/docker-entrypoint.sh"]