# ==========================================
# Stage 1: Builder - Build Medusa application
# ==========================================
FROM node:20-alpine AS builder

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++ git

WORKDIR /app

# Copy package files for dependency installation
COPY package.json package-lock.json* ./

# Install all dependencies (including devDependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Create directories that might not exist and set permissions
RUN mkdir -p dist uploads .medusa && \
    chmod -R 755 .medusa

# Build Medusa application
RUN npm run build

# Debug: List what was created
RUN echo "=== Build output ===" && \
    ls -la /app/ && \
    echo "=== Checking .medusa ===" && \
    ls -la /app/.medusa/ 2>/dev/null || echo ".medusa directory not found" && \
    echo "=== Checking dist ===" && \
    ls -la /app/dist/ 2>/dev/null || echo "dist directory not found"

# Install production dependencies
# Medusa V2 might put build output in different location
WORKDIR /app
RUN if [ -d ".medusa/server" ]; then \
    cd .medusa/server && npm ci --omit=dev; \
    else \
    npm ci --omit=dev; \
    fi

# ==========================================
# Stage 2: Runtime - Production image
# ==========================================
FROM node:20-alpine AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    dumb-init

# Environment variables
ENV NODE_ENV=production \
    PORT=9000 \
    LOG_LEVEL=info

# Create non-root user
RUN addgroup -S medusa && \
    adduser -S medusa -G medusa

WORKDIR /app

# Copy application files from builder
COPY --chown=medusa:medusa --from=builder /app/package.json ./
COPY --chown=medusa:medusa --from=builder /app/node_modules ./node_modules
COPY --chown=medusa:medusa --from=builder /app/medusa-config.* ./
COPY --chown=medusa:medusa --from=builder /app/dist ./dist
COPY --chown=medusa:medusa --from=builder /app/uploads ./uploads

# Copy .medusa directory (Medusa V2+)
COPY --chown=medusa:medusa --from=builder /app/.medusa/ ./.medusa/

# Ensure .medusa directory exists and has correct permissions
RUN mkdir -p /app/.medusa && \
    chown -R medusa:medusa /app/.medusa && \
    chmod -R 755 /app/.medusa

# Create uploads directory with proper permissions
RUN mkdir -p /app/uploads && \
    chown -R medusa:medusa /app/uploads

# Switch to root temporarily to copy and set permissions
USER root

# Copy entrypoint script
COPY --chown=medusa:medusa --chmod=755 docker-entrypoint.sh /app/docker-entrypoint.sh

# Switch to non-root user
USER medusa

# Expose Medusa port
EXPOSE 9000

# Healthcheck
HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Use dumb-init for proper signal handling, then execute script with sh
ENTRYPOINT ["/usr/bin/dumb-init", "--", "/bin/sh", "/app/docker-entrypoint.sh"]