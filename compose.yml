services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: medusa_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-medusa-store}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: medusa_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Medusa Server
  medusa:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: medusa_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      - NODE_ENV=production  # ‚Üê IMPORTANT: mode production
      - DATABASE_URL=postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-medusa-store}
      - REDIS_URL=redis://redis:6379
      - PORT=9000
      - MEDUSA_WORKER_MODE=server
    env_file:
      - .env
    networks:
      - medusa_network
    # RETIRE les volumes pour la production
    # volumes:
    #   - .:/app
    #   - /app/node_modules

volumes:
  postgres_data:

networks:
  medusa_network:
    driver: bridge